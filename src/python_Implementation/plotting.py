
import matplotlib.pyplot as plt         # for plotting
from math import sin
from math import pi
import peakutils                        # which we cloned now using git clone

import numpy as np                      # For array operations
import scipy.io as sio                  # (optional) to get data from .mat file a MATLAB data file


#----------------------------------------------------#
# Paste the contents of terminal Here
volta = 7330
t = [0.006, 0.03, 0.04100000000000001, 0.052, 0.065, 0.076, 0.08699999999999999, 0.099, 0.11, 0.122, 0.134, 0.147, 0.158, 0.169, 0.181, 0.192, 0.204, 0.216, 0.227, 0.239, 0.251, 0.262, 0.274, 0.286, 0.297, 0.309, 0.32, 0.331, 0.343, 0.355, 0.367, 0.383, 0.399, 0.4109999999999999, 0.422, 0.434, 0.446, 0.457, 0.4680000000000001, 0.479, 0.491, 0.502, 0.515, 0.526, 0.5380000000000001, 0.549, 0.561, 0.572, 0.584, 0.596, 0.607, 0.618, 0.63, 0.641, 0.653, 0.665, 0.6760000000000001, 0.689, 0.7, 0.7109999999999999, 0.723, 0.735, 0.747, 0.758, 0.769, 0.782, 0.794, 0.806, 0.817, 0.8279999999999999, 0.8390000000000001, 0.851, 0.8619999999999999, 0.874, 0.8859999999999999, 0.8970000000000001, 0.908, 0.9200000000000001, 0.931, 0.943, 0.9549999999999999, 0.966, 0.977, 0.9879999999999999, 1.001, 1.012, 1.024, 1.036, 1.047, 1.058, 1.069, 1.081, 1.092, 1.105, 1.116, 1.127, 1.138, 1.15, 1.161, 1.173, 1.185, 1.199, 1.211, 1.222, 1.234, 1.246, 1.257, 1.268, 1.28, 1.291, 1.303, 1.316, 1.327, 1.338, 1.349, 1.36, 1.372, 1.384, 1.395, 1.407, 1.419, 1.43, 1.442, 1.454, 1.466, 1.477, 1.489, 1.5, 1.512, 1.524, 1.536, 1.547, 1.558, 1.57, 1.586, 1.597, 1.608, 1.621, 1.632, 1.644, 1.656, 1.667, 1.678, 1.689, 1.701, 1.712, 1.725, 1.736, 1.747, 1.758, 1.77, 1.781, 1.792, 1.805, 1.816, 1.827, 1.838, 1.85, 1.861, 1.873, 1.885, 1.896, 1.907, 1.918, 1.93, 1.942, 1.954, 1.966, 1.977, 1.988, 2.0, 2.011, 2.023, 2.035, 2.046, 2.058, 2.069, 2.08, 2.092, 2.104, 2.116, 2.127, 2.138, 2.15, 2.161, 2.172, 2.188, 2.199, 2.21, 2.221, 2.233, 2.245, 2.256, 2.268, 2.279, 2.29, 2.301, 2.313, 2.325, 2.336, 2.348, 2.36, 2.372, 2.384, 2.399, 2.411, 2.423, 2.435, 2.447, 2.458, 2.469, 2.481, 2.492, 2.504, 2.521, 2.533, 2.546, 2.558, 2.569, 2.581, 2.592, 2.604, 2.616, 2.627, 2.638, 2.649, 2.661, 2.672, 2.685, 2.696, 2.707, 2.719, 2.73, 2.741, 2.753, 2.766, 2.777, 2.789, 2.801, 2.812, 2.825, 2.836, 2.847, 2.859, 2.87, 2.881, 2.894, 2.907, 2.919, 2.931, 2.943, 2.955, 2.966, 2.977, 2.988, 3.0, 3.011, 3.024, 3.036, 3.047, 3.058, 3.069, 3.081, 3.094, 3.106, 3.117, 3.128, 3.14, 3.151, 3.163, 3.176, 3.187, 3.202, 3.214, 3.226, 3.237, 3.248, 3.26, 3.271, 3.283, 3.296, 3.307, 3.318, 3.329, 3.341, 3.352, 3.366, 3.377, 3.388, 3.4, 3.411, 3.423, 3.435, 3.446, 3.457, 3.468, 3.48, 3.491, 3.503, 3.515, 3.527, 3.539, 3.551, 3.562, 3.574, 3.586, 3.598, 3.609, 3.62, 3.632, 3.644, 3.656, 3.667, 3.678, 3.69, 3.702, 3.715, 3.726, 3.737, 3.748, 3.76, 3.771, 3.782, 3.795, 3.807, 3.818, 3.829, 3.841, 3.852, 3.864, 3.876, 3.887, 3.898, 3.909, 3.921, 3.932, 3.945, 3.956, 3.967, 3.978, 3.994, 4.006, 4.017, 4.031, 4.043, 4.056, 4.067, 4.079, 4.09, 4.102, 4.114, 4.125, 4.136, 4.148, 4.159, 4.17, 4.182, 4.194, 4.206, 4.217, 4.228, 4.24, 4.252, 4.264, 4.276, 4.287, 4.298, 4.31, 4.321, 4.332, 4.344, 4.356, 4.367, 4.378, 4.39, 4.406, 4.417, 4.429, 4.44, 4.451, 4.463, 4.475, 4.486, 4.497, 4.509, 4.522, 4.534, 4.546, 4.558, 4.569, 4.581, 4.593, 4.605, 4.616, 4.628, 4.639, 4.65, 4.661, 4.673, 4.685, 4.696, 4.707, 4.719, 4.731, 4.742, 4.754, 4.766, 4.777, 4.788, 4.799, 4.811, 4.822, 4.834, 4.846, 4.857, 4.868, 4.88, 4.891, 4.903, 4.915, 4.926, 4.937, 4.948, 4.96, 4.971, 4.983, 4.995, 5.006, 5.018, 5.03, 5.041, 5.053, 5.065, 5.076, 5.087, 5.098, 5.11, 5.121, 5.132, 5.145, 5.156, 5.171, 5.183, 5.197, 5.208, 5.22, 5.231, 5.243, 5.255, 5.266, 5.278, 5.29, 5.301, 5.312, 5.325, 5.336, 5.348, 5.359, 5.371, 5.382, 5.394, 5.405, 5.417, 5.428, 5.439, 5.45, 5.462, 5.474, 5.486, 5.497, 5.509, 5.52, 5.534, 5.547, 5.558, 5.569, 5.581, 5.592, 5.604, 5.616, 5.627, 5.638, 5.65, 5.661, 5.672, 5.684, 5.696, 5.707, 5.718, 5.73, 5.741, 5.753, 5.765, 5.776, 5.788, 5.799, 5.811, 5.822, 5.834, 5.846, 5.857, 5.869, 5.88, 5.891, 5.903, 5.915, 5.926, 5.937, 5.948, 5.96, 5.971, 5.982, 5.995, 6.011, 6.022, 6.035, 6.046, 6.057, 6.068, 6.08, 6.092, 6.104, 6.116, 6.127, 6.138, 6.149, 6.161, 6.172, 6.184, 6.196, 6.207, 6.218, 6.229, 6.241, 6.252, 6.264, 6.276, 6.287, 6.298, 6.31, 6.321, 6.332, 6.344, 6.356, 6.367, 6.378, 6.39, 6.401, 6.413, 6.426, 6.438, 6.449, 6.461, 6.472, 6.484, 6.496, 6.507, 6.518, 6.53, 6.541, 6.553, 6.565, 6.576, 6.587, 6.598, 6.61, 6.622, 6.635, 6.646, 6.657, 6.668, 6.68, 6.692, 6.703, 6.715, 6.726, 6.738, 6.749, 6.761, 6.772, 6.784, 6.796, 6.807, 6.818, 6.83, 6.841, 6.852, 6.865, 6.876, 6.887, 6.898, 6.91, 6.921, 6.933, 6.946, 6.957, 6.968, 6.979, 6.991, 7.002, 7.015, 7.026, 7.038, 7.049, 7.061, 7.072, 7.084, 7.096, 7.108, 7.12, 7.131, 7.143, 7.155, 7.166, 7.178, 7.189, 7.204, 7.216, 7.227, 7.238, 7.25, 7.261, 7.273, 7.285, 7.296, 7.307, 7.318, 7.33, 7.341, 7.353, 7.365, 7.376, 7.387, 7.399, 7.41, 7.421, 7.433, 7.445, 7.456, 7.467, 7.478, 7.49, 7.501, 7.513, 7.525, 7.541, 7.552, 7.564, 7.576, 7.587, 7.598, 7.61, 7.621, 7.633, 7.645, 7.657, 7.668, 7.68, 7.691, 7.702, 7.715, 7.726, 7.737, 7.748, 7.76, 7.771, 7.783, 7.795, 7.806, 7.818, 7.829, 7.84, 7.851, 7.863, 7.875, 7.886, 7.898, 7.909, 7.921, 7.933, 7.946, 7.957, 7.968, 7.98, 7.992, 8.007, 8.019, 8.029999999999999, 8.041, 8.053000000000001, 8.065, 8.076000000000001, 8.087, 8.098000000000001, 8.109999999999999, 8.121, 8.132999999999999, 8.146000000000001, 8.157, 8.167999999999999, 8.18, 8.191000000000001, 8.202999999999999, 8.215999999999999, 8.228, 8.239000000000001, 8.250999999999999, 8.262, 8.273999999999999, 8.286, 8.297000000000001, 8.308999999999999, 8.32, 8.331, 8.343, 8.355, 8.366, 8.377000000000001, 8.388, 8.4, 8.411, 8.423, 8.435, 8.446, 8.457000000000001, 8.468, 8.481, 8.492000000000001, 8.504, 8.516, 8.528, 8.539, 8.555999999999999, 8.567, 8.577999999999999, 8.59, 8.601000000000001, 8.612, 8.625, 8.635999999999999, 8.647, 8.657999999999999, 8.67, 8.680999999999999, 8.693, 8.706, 8.717000000000001, 8.728, 8.74, 8.750999999999999, 8.763, 8.776, 8.787000000000001, 8.798, 8.81, 8.821, 8.832000000000001, 8.845000000000001, 8.856, 8.867000000000001, 8.878, 8.890000000000001, 8.901, 8.913, 8.925000000000001, 8.936, 8.948, 8.959, 8.970000000000001, 8.981, 8.993, 9.005000000000001, 9.016, 9.028, 9.039999999999999, 9.051, 9.063000000000001, 9.074999999999999, 9.086, 9.098000000000001, 9.109, 9.121, 9.132, 9.144, 9.156000000000001, 9.167, 9.183999999999999, 9.196, 9.209, 9.221, 9.233000000000001, 9.244999999999999, 9.257, 9.268000000000001, 9.279, 9.291, 9.302, 9.314, 9.326000000000001, 9.337, 9.348000000000001, 9.359999999999999, 9.371, 9.382999999999999, 9.395, 9.406000000000001, 9.417, 9.428000000000001, 9.44, 9.451000000000001, 9.462999999999999, 9.475, 9.487, 9.497999999999999, 9.51, 9.521000000000001, 9.532999999999999, 9.548, 9.56, 9.571, 9.583, 9.595000000000001, 9.609999999999999, 9.621, 9.632999999999999, 9.645, 9.656000000000001, 9.667999999999999, 9.679, 9.691000000000001, 9.702, 9.714, 9.726000000000001, 9.737, 9.747999999999999, 9.76, 9.771000000000001, 9.782, 9.794, 9.805999999999999, 9.817, 9.827999999999999, 9.84, 9.852, 9.864000000000001, 9.875999999999999, 9.887, 9.898, 9.91, 9.920999999999999, 9.933, 9.945, 9.956, 9.968, 9.978999999999999, 9.99, 10.002]
ang_pos = [0, 0, 0, 2, 5, 9, 13, 19, 23, 27, 30, 31, 30, 28, 25, 21, 18, 14, 12, 11, 11, 13, 17, 20, 25, 29, 31, 34, 35, 35, 33, 27, 23, 18, 15, 13, 13, 14, 16, 20, 24, 28, 32, 34, 36, 37, 35, 33, 29, 25, 22, 19, 17, 16, 17, 19, 22, 26, 30, 34, 37, 38, 39, 38, 35, 32, 28, 24, 21, 19, 17, 18, 20, 23, 27, 31, 35, 38, 41, 41, 41, 39, 36, 32, 28, 24, 22, 20, 20, 21, 24, 27, 32, 36, 39, 41, 43, 43, 41, 38, 33, 29, 25, 22, 20, 19, 21, 23, 25, 29, 34, 37, 40, 41, 41, 40, 37, 34, 30, 26, 23, 21, 20, 20, 22, 25, 29, 33, 37, 40, 41, 42, 40, 38, 33, 28, 25, 21, 19, 18, 19, 21, 24, 28, 32, 36, 39, 40, 40, 39, 37, 33, 29, 25, 21, 19, 17, 18, 19, 23, 27, 30, 34, 38, 40, 41, 41, 39, 36, 32, 29, 25, 22, 21, 21, 22, 25, 27, 33, 37, 40, 43, 44, 44, 43, 39, 35, 31, 27, 23, 21, 20, 21, 23, 26, 29, 33, 37, 40, 41, 41, 40, 37, 33, 29, 25, 21, 19, 19, 20, 23, 27, 31, 35, 40, 42, 43, 42, 40, 36, 33, 29, 25, 23, 22, 22, 24, 27, 31, 35, 39, 42, 45, 46, 46, 45, 42, 39, 35, 31, 28, 27, 27, 29, 31, 35, 39, 44, 47, 50, 51, 50, 49, 45, 41, 38, 34, 31, 29, 29, 30, 33, 36, 41, 45, 49, 52, 53, 53, 51, 48, 43, 39, 35, 32, 31, 31, 32, 34, 38, 43, 47, 50, 52, 53, 53, 52, 49, 45, 42, 38, 35, 33, 33, 34, 37, 40, 44, 48, 52, 55, 57, 57, 55, 52, 49, 45, 41, 38, 36, 35, 35, 37, 41, 44, 49, 53, 55, 57, 57, 57, 54, 51, 47, 43, 40, 38, 37, 37, 39, 42, 46, 50, 54, 57, 59, 61, 61, 59, 57, 51, 47, 43, 41, 40, 41, 43, 47, 50, 55, 59, 62, 64, 65, 63, 61, 57, 53, 50, 46, 44, 43, 43, 45, 48, 52, 56, 60, 63, 65, 66, 66, 64, 61, 56, 52, 49, 46, 45, 45, 46, 49, 52, 56, 60, 64, 66, 67, 66, 63, 60, 56, 52, 49, 45, 43, 43, 44, 47, 50, 53, 57, 61, 63, 64, 63, 62, 59, 56, 51, 48, 45, 43, 43, 44, 46, 49, 53, 58, 61, 64, 66, 66, 65, 63, 60, 56, 51, 49, 46, 45, 45, 47, 49, 53, 57, 61, 64, 66, 67, 66, 63, 59, 55, 51, 47, 45, 44, 45, 47, 50, 53, 58, 62, 65, 67, 67, 66, 64, 60, 57, 53, 49, 47, 45, 46, 47, 51, 54, 58, 63, 67, 69, 69, 69, 66, 63, 59, 56, 52, 49, 47, 47, 48, 50, 53, 57, 61, 64, 66, 67, 67, 66, 63, 60, 56, 52, 49, 47, 47, 48, 50, 53, 57, 61, 65, 68, 70, 70, 69, 67, 63, 58, 53, 50, 48, 47, 47, 49, 53, 57, 61, 64, 67, 68, 68, 67, 64, 61, 57, 53, 50, 47, 46, 46, 47, 50, 54, 58, 61, 65, 67, 68, 67, 65, 62, 59, 55, 51, 47, 45, 45, 47, 49, 53, 57, 61, 65, 67, 69, 68, 67, 65, 61, 57, 54, 51, 49, 48, 49, 51, 53, 57, 61, 65, 67, 69, 70, 68, 66, 63, 59, 55, 51, 48, 47, 47, 48, 51, 54, 58, 62, 65, 68, 69, 68, 66, 63, 59, 55, 51, 49, 47, 47, 48, 51, 55, 58, 62, 66, 69, 70, 70, 68, 66, 62, 57, 54, 51, 49, 49, 51, 53, 57, 61, 65, 69, 71, 73, 73, 71, 69, 65, 61, 57, 54, 52, 51, 52, 54, 57, 61, 65, 69, 73, 75, 75, 74, 71, 68, 65, 61, 57, 55, 55, 55, 57, 60, 64, 68, 72, 74, 76, 77, 75, 73, 70, 66, 62, 58, 55, 53, 53, 54, 56, 59, 63, 67, 71, 73, 74, 73, 71, 69, 65, 59, 55, 53, 51, 51, 52, 55, 58, 62, 66, 69, 71, 73, 72, 71, 68, 64, 60, 57, 54, 52, 52, 53, 56, 59, 63, 67, 71, 73, 74, 74, 72, 69, 65, 62, 58, 55, 52, 51, 52, 55, 58, 62, 67, 71, 73, 75, 75, 73, 71, 67, 63, 59, 57, 55, 54, 55, 57, 61, 65, 69, 73, 76, 77, 78, 77, 74, 70, 67, 63, 59, 57, 56, 57, 59, 62, 65, 70, 74, 77, 79, 80, 79, 78, 75, 71, 67, 64, 61, 59, 59, 61, 64, 67, 71, 75, 79, 81, 83, 82, 80, 77, 73, 68, 65, 62, 61, 61, 63, 66, 70, 74, 78, 81, 83, 83, 82, 80, 77, 73, 69, 65, 62, 61, 61, 62, 65, 68, 72, 76, 80, 82, 83, 82, 80, 77, 73, 68, 64, 61, 61, 61, 63, 66, 70, 74, 78, 81, 83, 83, 82, 80, 77, 72, 69, 65, 62, 61, 61, 62, 65, 68, 73, 76, 80, 83, 84, 83, 82, 79, 77, 73]
f = 5


#----------------------------------------------------#
# To save the voltage and anglur position from wheel encoder

volta=volta*.001                                        # To convert mV into Volts
t=np.asarray(t)                                         # Convert list into array
arg=np.multiply(t,2*pi*f)                               # We can determine the duty cycle by ouerselves using the equations defined earlier. 
dutycycle=np.sin(arg)
vol=np.multiply(dutycycle,volta)                        # Calculate the input voltage from duty cycle using known equations
ang_pos=np.asarray(ang_pos)                             # Convert list as an array

#-------------------------------------------------------#
# Plot voltage vs time and angular position vs time
plt.figure(1)
plt.plot(t, vol) 
plt.xlabel('time') 
plt.ylabel('voltage') 
plt.title('Input') 
plt.figure(2)
plt.plot(t,ang_pos)
plt.xlabel('time')
plt.ylabel('Angular Position')
plt.title('Output')  

plt.figure(3)
plt.plot(t,(vol-np.mean(vol))/np.max(vol))
plt.plot(t,((ang_pos-np.mean(ang_pos))/(.5*np.max(ang_pos))))

  
#-----------------------------------------------------------#
# To find magnitude ratio of input to output

volpks = peakutils.indexes(vol, thres=0.5/max(vol), min_dist=1)               # To find the peak values of the sinewaves
volmean=np.mean(vol[volpks])
ang_pospks=peakutils.indexes(ang_pos, thres=0.5/max(vol), min_dist=1)         # To find the peak values of the sinewaves
ang_posmean=np.mean(ang_pos[ang_pospks])

mag=np.loadtxt('mag.dat')                                                     # Retrieve the magnitude ratio from a file
mag=np.append(mag,[ang_posmean/volmean])                                      # Append the new value at current frquency
np.savetxt('mag.dat', mag)                                                    # Now store the Magnitude ratio to file

freq=np.loadtxt('freq.dat')                                                   # Same procedure for the frequency
freq=np.append(freq,[f])
np.savetxt('freq.dat', freq)

plt.figure(4)
plt.semilogx(2*pi*freq, 20*np.log10(mag))
plt.xlabel('Angular frequency')
plt.ylabel('Magnitude in dB')
plt.title('Magnitude Bode Plot')

#-----------------------------------------------------#
# To save the data at the end
# np.savetxt('ol_data.dat', [freq,mag])


#-----------------------------------------------------#
# Saved data

# Since I have conducted the experimrnt before I have stored the data here 
data=np.loadtxt('ol_data.dat')
plt.figure(5)
plt.semilogx(data[0],20*np.log10(data[1]))
plt.xlabel('Angular frequency')
plt.ylabel('Magnitude in dB')
plt.title('Magnitude Bode Plot')


#-------------------------------------------------------#


# To get data from .mat File
# data=sio.loadmat('ol_data.mat')
# ol_mag=data.get('ol_mag')
# ol_mag=np.asarray(ol_mag)
# freq=data.get('freq')
# freq=np.asarray(freq)
# np.savetxt('ol_data.dat', [freq[0],ol_mag[0]])

#-------------------------------------------------------#
# Compare results from python and MATLAB (optional)

plt.show() 